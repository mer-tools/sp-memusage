#!/bin/sh
#
# Script for showing size-sorted totals for given mappings for
# all the processes. This file is part of sp-memusage.
#
# Copyright (C) 2010-2011 by Nokia Corporation
#
# Contact: Eero Tamminen <eero.tamminen@nokia.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License 
# version 2 as published by the Free Software Foundation. 
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA

usage ()
{
	name=${0##*/}
	echo
	echo "$name [-q] <SMAPS mapping pattern> <SMAPS field pattern>"
	echo
	echo "Shows size-sorted totals for given mappings for all the processes."
	echo
	echo "SMAPS mapping pattern can have anything from the mapping line that comes"
	echo "_after_ the given mapping's address range; access rights, file name etc."
	echo "Characters that are special for regular expressions '[].+*', need to"
	echo "be quoted with '\\' if they are supposed to be matched literally!"
	echo
	echo "SMAPS field pattern needs to start with one of the SMAPS field names:"
	echo "  Size, Rss, Pss, Shared_Clean, Shared_Dirty, Private_Clean,"
	echo "  Private_Dirty, Referenced, Anonymous, Swap, Locked."
	echo
	echo "  (-q = be quit, output just data, no headings)"
	echo
	echo "Examples:"
	echo "- what processes use most RAM:"
	echo "  $name '.*' Pss"
	echo "- what processes are most on swap:"
	echo "  $name '.*' Swap"
	echo "- what processes have largest heaps:"
	echo "  $name '\[heap\]' Size"
	echo "- what processes have largest total of shared memory segments:"
	echo "  $name SYSV Size"
	echo "- which processes' executable code sections are writable:"
	echo "  $name ' rwxp ' Size"
	echo "- total of given sized anonymous allocs (unnamed mappings) in processes:"
	echo "  $name ' 0 \$' 'Size: *2044 '"
	echo
	echo "ERROR: $1!"
	echo
	exit 1
}

verbose=1
if [ "$1" = "-q" ]; then
	verbose=0
	shift
fi

if [ $# -ne 2 ]; then
	usage "wrong number of arguments"
fi

mapping=$(echo "$1"|sed 's%/%\\/%g')	# quote awk pattern delimiters
field="${2%%:*}"			# SMAPS field used for checking
line="$2"				# full SMAPS field line to match

if [ -z "$(echo ""$field""|grep -e '^Size$' -e '^Rss$' -e '^Pss$' -e '^Shared_Clean$' -e '^Shared_Dirty$' -e '^Private_Clean$' -e '^Private_Dirty$' -e '^Referenced$' -e '^Anonymous$' -e '^Swap$' -e '^Locked$')" ]; then
	usage "unknown SMAPS field used in '$field'"
fi

if [ $verbose -gt 0 ]; then
	if [ "$field" = "$line" ]; then
		echo "Finding process totals for field '$field' in '$mapping' mappings..."
	else
		echo "Finding process totals for field '$field' matching line '$line' in '$mapping' mappings..."
	fi

	echo
	heading="  Size:\t\t PID:\tName:\n"
	printf "$heading"
fi

cd /proc
for pid in [0-9]*; do
	name=$(tr '\0' ' ' < $pid/cmdline|cut -b-52)
	awk -v pid=$pid -v name="$name" '
# hex address range, stuff, mapping name
/^[0-9a-f]+-[0-9a-f]+.*'"$mapping"'/ {
	mapping = 1;
	map = $6;
	next;
}
/^'"$line"'/ {
	if (mapping > 0) {
		mapping = 0;
		size += $2;
	}
	next;
}
/^'"$field"'/ {
	mapping = 0;
	next;
}
END {
	if (size) {
		printf("%7d kB\t%5d\t%s\n", size, pid, name);
	}
}
' $pid/smaps
done|sort -n

if [ $verbose -gt 0 ]; then
	printf "$heading"
fi
