#!/usr/bin/env python

# Copyright (C) 2011 by Nokia Corporation
#
# Contact: Eero Tamminen <eero.tamminen@nokia.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License 
# version 2 as published by the Free Software Foundation. 
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA

import sys, string, re, os, getopt, subprocess, operator

class Options:
	"""
	This class contains options parser implementation.
	"""
	REPORT_RESOURCE = 1
	REPORT_PROCESS = 2

	fileIn = None
	fileOut = None
	dirOut = "./"
	reportType = REPORT_PROCESS | REPORT_RESOURCE

	def parse(argv):
		"Parses the command line arguments and initializes options."
		try:
			opts, args = getopt.gnu_getopt(argv, "i:o:hrp",
										["in=", 
										 "out=",
										 "help",
										 "resource",
										 "process"])
		except getopt.GetoptError, err:
			print >> sys.stderr, str(err) 
			Options.displayUsage()
			sys.exit(2)

		for opt, val in opts:
			if opt == "-i" or opt == "--in":
				Options.fileIn = val
				continue

			if opt == "-r" or opt == "--resource":
				Options.type = self.REPORT_RESOURCE
				continue

			if opt == "-p" or opt == "--process":
				Options.type = self.REPORT_PROCESS
				continue
			
			if opt == "-o" or opt == "--out":
				Options.dirOut = val
				continue

			if opt == "-h" or opt == "--help":
				Options.displayUsage()
				sys.exit(0)

		return


	def displayUsage():
		print \
"""
Usage:
  mem-cpu-plot <options>
  Where <options> are:
    -i <path>  input file. Standard input is used by default.
    -o <path>  output directory. Current directory is used by default.
    -r         create only resource reports.
    -p         create only process reports.
    -h         this help page.
"""

	# static method definitions
	parse = staticmethod(parse)
	displayUsage = staticmethod(displayUsage)


class Unit:
	"""
	This class contains parsed data of single unit - either system
	or process.
	"""

	# unit index
	index = 0

	# the unit name
	name = None
	
	def __init__(self, name, pid):
		"""
		"""
		self.name = name
		self.pid = pid
		self.memUsage = []
		self.cpuUsage = []
		self.index = Unit.index
		Unit.index += 1

		self.avgMemUsage = 0
		self.avgCpuUsage = 0
		
	def appendUsageData(self, mem, cpu):
		"Adds resource (memory, cpu) usage data"
		n = len(self.memUsage)
		self.avgMemUsage = self.avgMemUsage * (float(n) / (n + 1)) + mem / (n + 1)
		self.memUsage.append(mem)

		n = len(self.cpuUsage)
		self.avgCpuUsage = self.avgCpuUsage * (float(n) / (n + 1)) + cpu / (n + 1)
		self.cpuUsage.append(cpu)


class Data:
	"""
	This class contains the parsed data
	"""
	
	# Maximum CPU frequency (MHx)
	maxCpu = None
	
	# Total system memory (kB)
	maxMemory = None
	
	def __init__(self):
		self.units = []
		self.time = []
		
		self.units.append(Unit("System", 0))
		
	def addPlotData(self, timestamp, values):
		"Adds unit resource usage data at the specified timestamp"
		self.time.append(timestamp)
		index = 0
		for unit in self.units:
			unit.appendUsageData(values[index], values[index + 1])
			index += 2
			

class Parser:
	"""
	This class parses mem-cpu-monitor output and collects cpu/memory usage data.
	Sample mem-cpu-monitor output:
	  System: CPU: 2201 MHz max, total memory: 4081788 kB RAM, 5099512 kB swap
	  ________ __________________ ___________ _______________________________
	          |  system memory   |system CPU |PID 4402 eclipse               
	     time:|     used: change:|    %: MHz:|  clean:  dirty: change: CPU-%:
	  12:20:00     898992     -92  33.3%  800    14180  164784      +0   0.0%
	  12:20:01     899116    +124   5.9%  828    14176  164788      +4   1.0%
	"""
	
	reSystemMem = re.compile("(.*) total memory: ([0-9]+) kB RAM, ([0-9]+) kB swap")
	reSystemCpu = re.compile("System: CPU: ([0-9]+) MHz max,")
	reHeader = re.compile(" *\|  system memory   \|system CPU ")
	reHeaderProcess = re.compile("[^PID]*PID ([0-9]+) ([^\|\n\033]+)")
	reData = re.compile("([^ ]+) +([0-9]+) +[0-9+\-]+ +([0-9\.]+)% +([0-9]+)")
	reTimestamp = re.compile("([0-9]+):([0-9]+):([0-9]+)\.?([0-9]+)?")
	reProcess = re.compile("( *\033[^ ]*m)? *([0-9]+) +([0-9]+) +[0-9+\-]+ +([0-9\.]+)%")


	def __init__(self):
		"""
		"""
	
	
	def adjustCpuFreq(self, perc, freq):
		"""
		Adjust cpu frequency to be percentange of maximu cpu frequency
		instead of current one.
		"""
		if self.data.maxCpu > 0:
			perc = perc * freq / self.data.maxCpu
		return perc


	def readSystemData(self):
		"""
		Reads system data (RAM and swap memory size and maximum CPU frequency:"
		  System: CPU: 2201 MHz max, total memory: 4081788 kB RAM, 5099512 kB swap
		"""
		for line in self.file:
			match = self.reSystemMem.match(line)
			if match:
				self.data.maxMemory = (int(match.group(2)) + int(match.group(3))) * 1024
				match = self.reSystemCpu.match(match.group(1))
				if match:
					self.data.maxCpu = int(match.group(1))
					return
				raise RuntimeError("Failed to read CPU data from header. "
								"Reports without maximum CPU frequency data are not supported")
		raise RuntimeError("Failed to locate line containing total system memory data")


	def readHeader(self):
		"""
		Reads process header data:
				|  system memory   |system CPU |PID 4402 eclipse			   
		"""
		for line in self.file:
			match = self.reHeader.match(line)
			if match:
				header = line[match.end():]
				while True:
					match = self.reHeaderProcess.match(header)
					if match:
						header = header[match.end():]
						self.data.units.append(Unit(match.group(2).rstrip(), int(match.group(1))))
					else:
						break
				return 
		raise RuntimeError("Failed to locate system data")
		
	
	def readData(self):
		"""
		Reads resource usage data:
		  12:20:02     899016    -100  16.8%  828    14176  164788      +0   4.7%
		"""
		# skip the first data line, as it contains half initialized values
		for line in self.file:
			match = self.reData.match(line)
			if match:
				break
		
		# parse the rest of data	
		for line in self.file:
			match = self.reData.match(line)
			if match:
				processText = line[match.end():]
				rawTimestamp = match.group(1)
				rawMemoryUsage = match.group(2)
				rawCpuUsage = match.group(3)
				rawCpuFreq = match.group(4)
				match = self.reTimestamp.match(match.group(1))
				timestamp = 0
				if match:
					timestamp = int(match.group(1)) * 3600000 + int(match.group(2)) * 60000 + int(match.group(3)) * 1000
					if match.group(4):
						timestamp += int(match.group(4))
				else:
					raise RuntimeError("Failed to parse timestamp value: %s") % rawTimestamp
				values = []
				values.append(int(rawMemoryUsage) * 1024)
				values.append(self.adjustCpuFreq(float(rawCpuUsage), int(rawCpuFreq)))
				
				# parse the process data
				while True:
					match = self.reProcess.match(processText)
					if match:
						values.append(int(match.group(3)) * 1024)
						values.append(self.adjustCpuFreq(float(match.group(4)), int(rawCpuFreq)))
						processText = processText[match.end():]
					else:
						break
				self.data.addPlotData(timestamp, values)
				
	
	def read(self, filename):
		"""
		Reads the specified mem-cpu-monitor output file or standard input if
		the filename was not specified.
		"""
		self.data = Data()
		
		self.file = sys.stdin
		if filename:
			self.file = open(filename, "r")

		self.readSystemData()
		self.readHeader()
		self.readData()
			
		if filename:
			self.file.close()
			
		return self.data
# /class Parser

class Tic:
	"""
	This class provides helper functions for time slices used to represent
	time tics and activity slices.
	"""
	value = 0
	format = None
	text = None
	decimal = 0
		
	def __init__(self, slice, rounded):
		if rounded:
			round = 1
			value = slice
			self.value = 1
			while value != 0:
				self.value = value * round;
				round *= 10
				value /= 10
			#
		else: 
			self.value = slice
			
		self.decimal = 3
		slice = self.value
		while self.decimal and slice and slice % 10 == 0:
			self.decimal -= 1
			slice /= 10	
		self.format = "%%.%df" % self.decimal
	
	def getText(self):
		"Returns tic value converted into text format"
		if not self.text:
			self.text = self.format % (float(self.value) / 1000)
		return self.text	
# /class Tic


class Timestamp:
	"""
	This class provides timestamp utility functions.
	"""
	rxpTimestamp = re.compile("^([0-9]+)\:([0-9]+)\:([0-9]+)\.([0-9]+)$")

	def toString(hours, decimal = 3):
		"Converts integer timestamp (milliseconds since midnight) to text format HH:MM:SS.sss"
		msecs = hours % 1000		
		hours /= 1000
		seconds = hours % 60
		hours /= 60
		minutes = hours % 60
		hours /= 60  
		timestamp = "%02d:%02d:%02d" % (hours, minutes, seconds)
		if decimal > 0:
			for i in range (3 - decimal):
				msecs /= 10
			mask = ".%%0%dd" % decimal
			timestamp += mask % msecs
		return timestamp
	
	toString = staticmethod(toString)
	
	def offsetToString(offset):
		"Converts timestamp offset (milliseconds) to text format +[HH:][MM:][SS][.sss]"
		text = Timestamp.toString(offset)
		text = string.lstrip(text, ":0")
		text = string.rstrip(text, "0")
		if text[-1] == '.':
			text = string.rstrip(text, ".")
		if text == "" or text[0] == '.':
			text = "0" + text
		return text
	
	offsetToString = staticmethod(offsetToString)
	
	def fromString(text):
		"Converts text format timestamp HH:MM:SS.sss into integer value (milliseconds since midnight)"
		timestamp = 0
		match = Timestamp.rxpTimestamp.match(text)
		if match:
			timestamp = int(match.group(1)) * 3600000 + int(match.group(2)) * 60000 + int(match.group(3)) * 1000 + int(match.group(4))
		return timestamp

	fromString = staticmethod(fromString)
# /class Timestamp


class Plotter:
	"""
	Creates gnuplot configuration/data files and invokes gnuplot to create
	the graphs.
	"""

	DATA_FILE = "mem-cpu-usage.dat"
	CONFIG_FILE = "mem-cpu-usage.cfg"

	PLOT_MEMORY = 1
	PLOT_CPU = 2
	PLOT_ALL = PLOT_MEMORY | PLOT_CPU

	def __init__(self, title, id, type):
		"""
		"""
		self.title = title
		self.id = id
		self.type = type

		self.DataFilename = Options.dirOut + "/" + Plotter.DATA_FILE
		self.ConfigFilename = Options.dirOut + "/" + Plotter.CONFIG_FILE

	def createDataFile(data):
		"""
		Create gnuplot data file:
		  <timestamp> <system mem> <system cpu> <proc1 mem> <proc1 cpu> <proc2 mem> <proc2 cpu> ...
		  ...
		"""
		filename = Options.dirOut + "/" + Plotter.DATA_FILE
		file = open(filename, "w")
		if file is None:
			raise RuntimeError("Failed to create data file: %s" % filename)
		index = 0
		for timestamp in data.time:
			file.write("%d" % timestamp)
			for unit in data.units:
				file.write(" %d %f" % (unit.memUsage[index], unit.cpuUsage[index]))
			index += 1
			file.write("\n")
		file.close()
		
	createDataFile = staticmethod(createDataFile)


	def removeDataFile():
		filename = Options.dirOut + "/" + Plotter.DATA_FILE
		if os.path.isfile(filename):
			os.remove(filename)

	removeDataFile = staticmethod(removeDataFile)


	def setAxisY(self, label, min, max, format = None):
		"Sets Y axis range (min-max) and formatting."
		if min == max:
			max += 1
		self.cfg.write("set yrange[%f:%f]\n" % (min, max))
		
		if format:
			self.cfg.write("set format y \"%s\"\n" % format)
		self.cfg.write("set ytics out\n")
		
		self.cfg.write("set ylabel \"%s\"\n" % label)
	
	
	def setAxisY2(self, label, min, max, format = None):
		"Sets Y2 axis range and formatting."
		
		self.cfg.write("set y2range[%f:%f]\n" % (min, max))
		
		if format:
			self.cfg.write("set format y2 \"%s\"\n" % format)
		self.cfg.write("set y2tics out\n")
		self.cfg.write("set ytics nomirror\n")
		
		self.cfg.write("set y2label \"%s\"\n" % label)

	def setAxisX(self, label, min = None, max = None, format = None, scale = None):
		"Sets X axis range (min-max) and formatting."

		# set ticks
		self.cfg.write("set xtics rotate nomirror\n")
		if scale:
			self.cfg.write("set xtics scale %s\n" % scale)
			
		if min:
			if min == max:
				max += 1
			range = max - min
			step = Tic(range / 10, True)
			tic = min - min % step.value
			if min % step.value > 0:
				tic += step.value
			min = tic
			
			# set label
			self.cfg.write("set xlabel \"%s\" offset 0,0\n" % label)
			# set  range
			self.cfg.write("set xrange[%d:%d]\n" % (min, max))
			# set the X axis tic label format, not used as tics are printed manually
	
			# place autotics outside range to avoid interference with manual tics
			self.cfg.write("set xtics %f,%f\n" % (max * 2, max * 2))
			
			while tic <= max - step.value:
				self.cfg.write("set xtics add (\"%s\\n+%s\" %d)\n" % (Timestamp.toString(tic, step.decimal), Timestamp.offsetToString(tic - min), tic))
				tic += step.value
			self.cfg.write("set xtics add (\"%s\\n+%s\" %d)\n" % (Timestamp.toString(max), Timestamp.offsetToString(range), max))
			

	def setHeader(self):
		"Sets the configuration file header."
		self.cfg.write("set terminal svg size 1024,768 dynamic\n")
		self.cfg.write("set title \"%s\"\n" % self.title)
		self.cfg.write("set style data lines\n")
		self.cfg.write("set key bmargin\n")
		
	def setPlot(self, plotUnits):
		"Sets the graphs for system and process resource usage."
		if self.type & self.PLOT_MEMORY:
			cpuAxis = "x1y2"
		else:
			cpuAxis = "x1y1"

		units = plotUnits
		labelMemSuffix = ""
		labelCpuSuffix = ""
		labelDelimiter = ""
		if self.type == self.PLOT_ALL:
			labelMemSuffix = "memory"
			labelCpuSuffix = "cpu"
			labelDelimiter = "-"
		elif self.type == self.PLOT_MEMORY:
			units = sorted(plotUnits, key=lambda unit: unit.avgMemUsage, reverse=True)
		elif self.type == self.PLOT_CPU:
			units = sorted(plotUnits, key=lambda unit: unit.avgCpuUsage, reverse=True)

		self.cfg.write("plot ")
		separator = "\t"
		for unit in units:
			self.cfg.write("\\\n")
			if len(units) > 1:
				labelPrefix = "%s(%s)%s" % (unit.name, unit.pid, labelDelimiter)
			else:
				labelPrefix = ""
			if self.type & self.PLOT_MEMORY:
				self.cfg.write("%s\"%s\" using 1:%d title \"%s%s\" axes x1y1 \\\n" %
							 (separator, self.DataFilename, unit.index * 2 + 2, labelPrefix, labelMemSuffix))
				separator = "\t,"
			if self.type & self.PLOT_CPU:
				self.cfg.write("%s\"%s\" using 1:%d title \"%s%s\" axes %s \\\n" % 
							(separator, self.DataFilename, unit.index * 2 + 3, labelPrefix, labelCpuSuffix, cpuAxis))
				separator = "\t,"
		self.cfg.write("\n")

	def createConfigFile(self, name, data, units):
		"Creates gnuplot configuration file."
		self.cfg = open(name, "w")
		if self.cfg is None:
			raise RuntimeError("Failed to create data file: %s" % name)

		# calculate vertical axis range
		topMemory = bottomMemory = units[0].memUsage[0]
		topCpu = bottomCpu = units[0].cpuUsage[0]
		for unit in units:
			for value in unit.memUsage:
				if value < bottomMemory:
					bottomMemory = value
				if value > topMemory:
					topMemory = value
			for value in unit.cpuUsage:
				if value < bottomCpu:
					bottomCpu = value
				if value > topCpu:
					topCpu = value
		if topCpu == bottomCpu:
			topCpu = bottomCpu + 1
		if topMemory == bottomMemory:
			topMemory = bottomMemory + 1

		self.setHeader()
		self.setAxisX("Time (s)", data.time[0], data.time[-1])
		if self.type & self.PLOT_MEMORY:
			if len(units) > 1:
				label = "Used system / dirty process memory"
			else:
				label = units[0].pid == 0 and "Used system memory" or "Dirty process memory"
			self.setAxisY(label, bottomMemory * 0.9, topMemory * 1.1, "%.1s%c")
			if self.type & self.PLOT_CPU:
				self.setAxisY2("CPU %", bottomCpu * 0.9, topCpu * 1.1)
		else:
			if self.type & self.PLOT_CPU:
				self.setAxisY("CPU %", bottomCpu * 0.9, topCpu * 1.1)

		self.setPlot(units)
		
		self.cfg.close()
		
	def cleanup(self):
		"Removes gnuplot configuration and data files."
		if os.path.isfile(self.ConfigFilename):
			os.remove(self.ConfigFilename)
		
	def plot(self, data, units = None):
		"Plot the resource usage graphs from the specified data"
		
		self.createConfigFile(self.ConfigFilename, data, units or data.units)
		# Convert with gnuplot
		try:
			filename = "%s/mem-cpu-plot-%s.svg" % (Options.dirOut, self.id)
			file = open(filename, "w")
			if file is None:
				raise RuntimeError("Failed to create output file: %s" % filename)
			
			gnuplot = subprocess.Popen(["gnuplot", self.ConfigFilename], 0, None, None, file)
			gnuplot.wait()
			file.close()

		except OSError, e:
			print >> sys.stderr, "ERROR: failed to execute gnuplot (%s)" % e.strerror
			print >> sys.stderr, "Check if the gnuplot package is installed and try again."
			self.cleanup()
			raise

		self.cleanup()



# main

try:
	gnuplot = subprocess.Popen(["gnuplot", "--version"], stdout=open('/dev/null', 'w'), stderr=subprocess.STDOUT)
	gnuplot.wait()
except OSError, e:
	print >> sys.stderr, "ERROR: failed to locate gnuplot uility."
	print >> sys.stderr, "Check if the gnuplot package is installed and try again."
	sys.exit(-1)

Options.parse(sys.argv[1:])
parser = Parser()
data = parser.read(Options.fileIn)

Plotter.createDataFile(data)

try:
	if Options.reportType & Options.REPORT_RESOURCE and len(data.units) > 1:
		plotter = Plotter("Memory usage graph", "memory", Plotter.PLOT_MEMORY)
		plotter.plot(data)
		plotter = Plotter("CPU usage graph", "cpu", Plotter.PLOT_CPU)
		plotter.plot(data)

	if Options.reportType & Options.REPORT_PROCESS:
		for unit in data.units:
			units = [unit]
			if unit.pid == 0:
				id = "system"
			else:
				id = unit.pid
			plotter = Plotter("Memory and CPU usage graph\\n%s(%d)" % (unit.name, unit.pid), id, Plotter.PLOT_ALL)
			plotter.plot(data, units)
except OSError, e:
	""

Plotter.removeDataFile()


